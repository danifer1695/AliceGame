#include "Game.h"


//******************************************************************************************************************************
// Constructor
//******************************************************************************************************************************

	Game::Game():is_running{true}{
		
	}

//******************************************************************************************************************************
// Init()
//******************************************************************************************************************************

	bool Game::Init(){
		
		
		try{
			Player::Get().initialize();
			
			Events::Get().set_game_instance(this);
			Events::Get().game_intro();
			
			Player::Get().get_current_room()->print();
			
		}catch(std::exception &ex){
			
			GAME_ERROR(ex.what());
			return false;
		}
		
		return true;
	}

//******************************************************************************************************************************
// process_inputs()
//******************************************************************************************************************************

	void Game::get_inputs(){
		
		std::getline(std::cin, input);
		
	}

//******************************************************************************************************************************
// update()
//******************************************************************************************************************************

	void Game::update(){
		try{
			Input_Parser input_p(input);
			if(!input_p.parse())
				is_running = false;	
			
			//if the player gets caught too many times, end the game;
			if(Player::Get().get_current_day() >= Player::Get().get_max_days()){
				is_running = false;
			}
			
		}catch(std::exception &ex){
			GAME_ERROR(ex.what());
		}
	}

//******************************************************************************************************************************
// draw()
//******************************************************************************************************************************

	void Game::draw(){
		Screen::Get().refresh();
	}

//******************************************************************************************************************************
// Run()
//******************************************************************************************************************************

	void Game::Run(){
		if(!Init())
			is_running = false;
		
		while(is_running){
			try{
				
				draw();
				get_inputs();
				update();
				
			}catch(int &ex){
				if(ex == 0)
					is_running = false;
			}
		}
	}